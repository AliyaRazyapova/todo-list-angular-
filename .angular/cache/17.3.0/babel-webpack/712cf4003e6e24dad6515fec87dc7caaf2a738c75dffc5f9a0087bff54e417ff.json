{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport { Task } from \"../shared/models/task.model\";\nimport { TaskStorageService } from \"../task-storage.service\";\nimport { Router, ActivatedRoute } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../task-storage.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = () => [\"/tasks\"];\nexport let TaskEditComponent = /*#__PURE__*/(() => {\n  class TaskEditComponent {\n    constructor(storage, route, router) {\n      this.storage = storage;\n      this.route = route;\n      this.router = router;\n      this.task = new Task('', ''); // Инициализируем объект задачи\n      this.title = new FormControl('');\n      this.note = new FormControl('');\n    }\n    ngOnInit() {\n      this.route.paramMap.subscribe(params => {\n        this.id = +params.get('id'); // Преобразуем строку в число и добавляем восклицательный знак для указания на то, что значение не является null\n        this.task = this.storage.get(this.id); // Добавляем восклицательный знак для указания на то, что значение не является undefined\n        this.note.setValue(this.task.note);\n        this.title.setValue(this.task.title);\n      });\n    }\n    updateTask() {\n      if (this.id !== null && this.title.value !== null && this.note.value !== null) {\n        this.storage.update(this.id, this.title.value, this.note.value);\n        this.router.navigate(['/tasks']);\n      }\n    }\n    static #_ = this.ɵfac = function TaskEditComponent_Factory(t) {\n      return new (t || TaskEditComponent)(i0.ɵɵdirectiveInject(i1.TaskStorageService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TaskEditComponent,\n      selectors: [[\"app-task-edit\"]],\n      decls: 16,\n      vars: 4,\n      consts: [[1, \"form-group\"], [\"for\", \"taskTitle\"], [\"type\", \"text\", \"id\", \"taskTitle\", 1, \"form-control\", 3, \"formControl\"], [\"for\", \"taskNote\"], [\"type\", \"text\", \"id\", \"taskNote\", 1, \"form-control\", 3, \"formControl\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"btn\", \"btn-light\", 3, \"routerLink\"]],\n      template: function TaskEditComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h2\");\n          i0.ɵɵtext(1, \"Edit your task\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"form\")(3, \"div\", 0)(4, \"label\", 1);\n          i0.ɵɵtext(5, \"Title\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(6, \"input\", 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"div\", 0)(8, \"label\", 3);\n          i0.ɵɵtext(9, \"Note\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(10, \"input\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"div\", 0)(12, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function TaskEditComponent_Template_button_click_12_listener() {\n            return ctx.updateTask();\n          });\n          i0.ɵɵtext(13, \"Update\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"button\", 6);\n          i0.ɵɵtext(15, \"Cancel\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"formControl\", ctx.title);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"formControl\", ctx.note);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(3, _c0));\n        }\n      },\n      dependencies: [i2.RouterLink, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgForm, i3.FormControlDirective]\n    });\n  }\n  return TaskEditComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}