{"ast":null,"code":"import { init_tasks } from '../assets/todo-list.json';\nimport { Task } from \"../app/shared/models/task.model\";\nimport * as i0 from \"@angular/core\";\nexport let TaskStorageService = /*#__PURE__*/(() => {\n  class TaskStorageService {\n    constructor() {\n      this.tasks = [];\n      /**\n       * Whether data have already been loaded from storage\n       */\n      this.initialized = false;\n    }\n    /**\n     * Returns all tasks\n     */\n    getTasks() {\n      this.init();\n      return this.tasks;\n    }\n    /**\n     * Remove the tasks from the list\n     *\n     * @param index task index to remove\n     */\n    delete(id) {\n      let remaining_tasks = [];\n      for (let i = 0; i < this.tasks.length; i++) {\n        var current_task = this.tasks[i];\n        // we found the task to remove, we do not include it in our new array\n        if (id == current_task.id) {\n          console.log('Skipping tash[' + current_task.title + ']');\n          continue;\n        }\n        remaining_tasks.push(this.tasks[i]);\n      }\n      this.tasks = remaining_tasks;\n      return true;\n    }\n    /**\n     * Return the task based in the given id\n     *\n     * @param id\n     */\n    get(id) {\n      this.init();\n      for (let i = 0; i < this.tasks.length; i++) {\n        let task = this.tasks[i];\n        // Если найдена задача с заданным id, возвращаем её\n        if (task.id === id) {\n          return task;\n        }\n      }\n      // Если задача с заданным id не найдена, возвращаем undefined\n      return undefined;\n    }\n    /**\n     * Create a new task based on the given data (+ generate a new id)\n     * @param title\n     * @param note\n     */\n    add(title, note) {\n      let task = new Task(title, note, this.getHighestId() + 1);\n      this.tasks.push(task);\n    }\n    /**\n     * Update the task and return it\n     *\n     * @param id\n     * @param title\n     * @param note\n     *\n     * @return Task\n     */\n    update(id, title, note) {\n      let task = this.get(id);\n      task.title = title;\n      task.note = note;\n      return task;\n    }\n    /**\n     * Load tasks from json file\n     */\n    init() {\n      if (this.initialized) {\n        console.log('Already initialized');\n        return;\n      }\n      console.log('Loading data from json file');\n      for (let i = 0; i < init_tasks.length; i++) {\n        this.tasks.push(new Task(init_tasks[i]['title'], init_tasks[i]['note'], init_tasks[i]['id']));\n      }\n      this.initialized = true;\n    }\n    /**\n     * Returns highest task id from our list.\n     */\n    getHighestId() {\n      this.init(); // Убедитесь, что данные загружены перед вычислением\n      return this.tasks.reduce((maxId, task) => Math.max(maxId, task.id), 0);\n    }\n    static #_ = this.ɵfac = function TaskStorageService_Factory(t) {\n      return new (t || TaskStorageService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskStorageService,\n      factory: TaskStorageService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return TaskStorageService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}